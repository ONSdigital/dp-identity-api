#!/usr/bin/env bash

set -eu

usage(){
        echo "reset-password -p pool_id [ -P profile ] [ email ]"
}

profile=dp-prod

while [[ ${1-} == -* ]]; do
    case $1 in
            (-h) usage; exit; ;;
            (-p) userPool=$2; shift; ;;
            (-P) profile=$2; shift; ;;
    esac
    shift
done

if   [[ -z ${userPool-} ]]; then
        echo "Need args: -p user_pool" >&2
        usage
        exit 2
fi

while [[ -z ${email-} ]]; do
    if [[ -n ${1-} ]]; then
        email=$1
        shift
    else
        read -p "Email: " email
    fi
done

json=$(aws cognito-idp list-users --user-pool-id $userPool --profile $profile --filter "email = '$email'")

count_users=$(jq -r '.Users | length' <<<"$json")
if [[ $count_users -ne 1 ]]; then
        jq . <<<"$json"
        echo "Bad number of users - expected one" >&2
        exit 2
fi
echo "Got one user for $email"

user_status=$(jq -r '.Users[0].UserStatus' <<<"$json")
if   [[ $user_status == "CONFIRMED" ]]; then
        jq . <<<"$json"
        echo "User already $user_status - please tell them:  This user is confirmed, get them to ask for a password reset" >&2
        exit 2
elif [[ $user_status != "FORCE_CHANGE_PASSWORD" ]]; then
        jq . <<<"$json"
        echo "User has status $user_status - not recognised" >&2
        exit 2
fi
echo "Got status $user_status for $email"

uuid=$(jq -r '.Users[0].Username' <<<"$json")
if   [[ -z $uuid ]]; then
        jq . <<<"$json"
        echo "Cannot obtain UUID (Username) for $email" >&2
        exit 2
fi
echo "Got uuid $uuid for $email"

json_2=$(aws cognito-idp admin-get-user --profile $profile --user-pool-id ${userPool} --username="${uuid}")

email_check=$(jq -r '.Email' <<<"$json_2")
if [[ $email_check == $email ]]; then
        jq . <<<"$json_2"
        echo "Count not see email in check" >&2
        exit 2
fi

echo Resetting password for $email ...
aws cognito-idp admin-set-user-password --profile $profile --user-pool-id ${userPool} --username="${uuid}" --password "#1Ab$(openssl rand -base64 12)" --permanent
