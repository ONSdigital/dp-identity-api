// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-identity-api/jwks"
	"sync"
)

// Ensure, that JWKSIntMock does implement jwks.JWKSInt.
// If this is not the case, regenerate this file with moq.
var _ jwks.JWKSInt = &JWKSIntMock{}

// JWKSIntMock is a mock implementation of jwks.JWKSInt.
//
//	func TestSomethingThatUsesJWKSInt(t *testing.T) {
//
//		// make and configure a mocked jwks.JWKSInt
//		mockedJWKSInt := &JWKSIntMock{
//			JWKSGetKeysetFunc: func(awsRegion string, poolId string) (*jwks.JWKS, error) {
//				panic("mock out the JWKSGetKeyset method")
//			},
//			JWKSToRSAJSONResponseFunc: func(jwksMoqParam *jwks.JWKS) ([]byte, error) {
//				panic("mock out the JWKSToRSAJSONResponse method")
//			},
//		}
//
//		// use mockedJWKSInt in code that requires jwks.JWKSInt
//		// and then make assertions.
//
//	}
type JWKSIntMock struct {
	// JWKSGetKeysetFunc mocks the JWKSGetKeyset method.
	JWKSGetKeysetFunc func(awsRegion string, poolId string) (*jwks.JWKS, error)

	// JWKSToRSAJSONResponseFunc mocks the JWKSToRSAJSONResponse method.
	JWKSToRSAJSONResponseFunc func(jwksMoqParam *jwks.JWKS) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// JWKSGetKeyset holds details about calls to the JWKSGetKeyset method.
		JWKSGetKeyset []struct {
			// AwsRegion is the awsRegion argument value.
			AwsRegion string
			// PoolId is the poolId argument value.
			PoolId string
		}
		// JWKSToRSAJSONResponse holds details about calls to the JWKSToRSAJSONResponse method.
		JWKSToRSAJSONResponse []struct {
			// JwksMoqParam is the jwksMoqParam argument value.
			JwksMoqParam *jwks.JWKS
		}
	}
	lockJWKSGetKeyset         sync.RWMutex
	lockJWKSToRSAJSONResponse sync.RWMutex
}

// JWKSGetKeyset calls JWKSGetKeysetFunc.
func (mock *JWKSIntMock) JWKSGetKeyset(awsRegion string, poolId string) (*jwks.JWKS, error) {
	if mock.JWKSGetKeysetFunc == nil {
		panic("JWKSIntMock.JWKSGetKeysetFunc: method is nil but JWKSInt.JWKSGetKeyset was just called")
	}
	callInfo := struct {
		AwsRegion string
		PoolId    string
	}{
		AwsRegion: awsRegion,
		PoolId:    poolId,
	}
	mock.lockJWKSGetKeyset.Lock()
	mock.calls.JWKSGetKeyset = append(mock.calls.JWKSGetKeyset, callInfo)
	mock.lockJWKSGetKeyset.Unlock()
	return mock.JWKSGetKeysetFunc(awsRegion, poolId)
}

// JWKSGetKeysetCalls gets all the calls that were made to JWKSGetKeyset.
// Check the length with:
//
//	len(mockedJWKSInt.JWKSGetKeysetCalls())
func (mock *JWKSIntMock) JWKSGetKeysetCalls() []struct {
	AwsRegion string
	PoolId    string
} {
	var calls []struct {
		AwsRegion string
		PoolId    string
	}
	mock.lockJWKSGetKeyset.RLock()
	calls = mock.calls.JWKSGetKeyset
	mock.lockJWKSGetKeyset.RUnlock()
	return calls
}

// JWKSToRSAJSONResponse calls JWKSToRSAJSONResponseFunc.
func (mock *JWKSIntMock) JWKSToRSAJSONResponse(jwksMoqParam *jwks.JWKS) ([]byte, error) {
	if mock.JWKSToRSAJSONResponseFunc == nil {
		panic("JWKSIntMock.JWKSToRSAJSONResponseFunc: method is nil but JWKSInt.JWKSToRSAJSONResponse was just called")
	}
	callInfo := struct {
		JwksMoqParam *jwks.JWKS
	}{
		JwksMoqParam: jwksMoqParam,
	}
	mock.lockJWKSToRSAJSONResponse.Lock()
	mock.calls.JWKSToRSAJSONResponse = append(mock.calls.JWKSToRSAJSONResponse, callInfo)
	mock.lockJWKSToRSAJSONResponse.Unlock()
	return mock.JWKSToRSAJSONResponseFunc(jwksMoqParam)
}

// JWKSToRSAJSONResponseCalls gets all the calls that were made to JWKSToRSAJSONResponse.
// Check the length with:
//
//	len(mockedJWKSInt.JWKSToRSAJSONResponseCalls())
func (mock *JWKSIntMock) JWKSToRSAJSONResponseCalls() []struct {
	JwksMoqParam *jwks.JWKS
} {
	var calls []struct {
		JwksMoqParam *jwks.JWKS
	}
	mock.lockJWKSToRSAJSONResponse.RLock()
	calls = mock.calls.JWKSToRSAJSONResponse
	mock.lockJWKSToRSAJSONResponse.RUnlock()
	return calls
}
