swagger: "2.0"
info:
  title: dp-identity-api
  description: "An API used to manage the authorisation of users accessing data publishing services."
  version: 1.0.0
  license:
    name: "Open Government Licence v3.0"
    url: "http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"
basePath: "/v1"
schemes:
  - http
paths:
  /v1/tokens:
    post:
      tags:
        - Tokens
      summary: "Creates tokens for authorisation, ID and refresh for authenticated users"
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: "The email and password for a user"
          schema:
            type: object
            required:
              - user
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: "Created"
          headers:
            Authorization:
              type: string
              description: "Auth token"
            ID:
              type: string
              description: "ID token"
            Refresh:
              type: string
              description: "Refresh token"
          schema:
            $ref: '#/definitions/ExpirationTime'

        400:
          description: "Invalid request. Empty or invalid email or empty password."
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: "Email or password are not authenticated"
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: "Forbidden. Too many login attempts"
          schema:
            $ref: '#/definitions/ErrorResponse'

        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v1/tokens/self:
    put:
      tags:
        - Tokens
      summary: "Refreshs a users access token using the refresh and ID tokens"
      consumes:
        - application/json
      parameters:
        - in: header
          type: string
          name: ID
          description: "The users ID token"
        - in: header
          type: string
          name: Refresh
          description: "The users refresh token"
      responses:
        201:
          description: "Created"
          headers:
            Authorization:
              type: string
              description: "Auth token"
            ID:
              type: string
              description: "ID token"
            Refresh:
              type: string
              description: "Refresh token"
          schema:
            $ref: '#/definitions/ExpirationTime'
        400:
          description: "Invalid request. Missing or malformed ID token or missing Refresh token provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: "Forbidden. Expired or invalid refresh token"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tokens
      summary: "Signs out a user, invalidating their access tokens"
      consumes:
        - application/json
      parameters:
        - in: header
          type: string
          name: Authorization
          description: "The users access token as bearer token"
      responses:
        204:
          description: "No Content - Successful sign out"
        400:
          description: "Invalid request. Missing, malformed or invalid access token provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v1/users:
    get:
      tags:
        - Users
      summary: "List users"
      description: "List all the user in the user pool"
      produces:
        - "application/json"
      responses:
        200:
          description: "The list of users"
          schema:
            $ref: '#/definitions/User'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Users
      summary: "Creates a new user"
      description: "Creates a new user in cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: user
          description: "The forename, surname and email for a user."
          schema:
            required: ["forename","surname","email"]
            type: object
            properties:
              forename:
                type: string
                example: "bob"
              surname:
                type: string
                example: "bobbings"
              email:
                type: string
                example: "email@ons.gov.uk"
      responses:
        201:
          description: "The user is created"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "Unable to validate the forename, username or email in the request"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v1/users/self/password:
    put:
      tags:
        - Users
      summary: "Changes the users password"
      description: "Changes the users password in Cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Change password params"
          description: "The type of change request, email address, new password and session"
          schema:
            required: ["type","email","password"]
            type: object
            properties:
              type:
                type: string
                example: "NewPasswordRequired"
              email:
                type: string
                example: "email@ons.gov.uk"
              password:
                type: string
              session:
                type: string
      responses:
        202:
          description: "Password changed"
          headers:
            Authorization:
              type: string
              description: "Auth token"
            ID:
              type: string
              description: "ID token"
            Refresh:
              type: string
              description: "Refresh token"
          schema:
            $ref: '#/definitions/ExpirationTime'
        400:
          description: "Unable to validate the type, email, passowrd or session in the request"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
        501:
          description: "Requested unimplemented password change type"
          schema:
            $ref: '#/definitions/ErrorResponse'


responses:
  InternalError:
    description: "Failed to process the request due to an internal error"

definitions:
  ExpirationTime:
    type: object
    properties:
      message:
        type: string
        description: "Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"

  User:
    description: "The user model for the response body"
    type: object
    properties:
      id:
        description: "The users id"
        type: string
      forename:
        description: "The users forename"
        type: string
      surname:
        description: "The users surname"
        type: string
      email:
        description: "The users email address"
        type: string
      groups:
        description: "The groups the user belongs to"
        type: array
        items:
          description: "The gropus name"
          type: string
      status:
        description: "The current status of the user"
        type: string
        enum: [UNCONFIRMED, CONFIRMED, ARCHIVED, COMPROMISED, UNKNOWN, RESET_REQUIRED, FORCE_CHANGE_PASSWORD]
        example: "CONFIRMED"

  ErrorResponse:
    description: "A list of any errors"
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/ErrorObject'

  ErrorObject:
    description: "An individual error details"
    type: object
    properties:
      code:
        type: string
        description: "Code representing the type of error that occurred"
        enum:
          - "JSONMarshalError"
          - "JSONUnmarshalError"
          - "WriteResponseError"
          - "InvalidForename"
          - "InvalidSurname"
          - "InvalidEmail"
          - "InvalidToken"
          - "InternalServerError"
          - "NotFound"
          - "AlreadyExists"
          - "DeliveryFailure"
          - "InvalidCode"
          - "ExpiredCode"
          - "InvalidField"
          - "InvalidPassword"
          - "LimitExceeded"
          - "NotAuthorised"
          - "PasswordResetRequired"
          - "TooManyFailedAttempts"
          - "TooManyRequests"
          - "UserNotConfirmed"
          - "UsernameExists"
          - "RequestBodyReadError"
          - "MissingConfig"
          - "UnknownRequestType"
          - "NotImplemented"
          - "InvalidChallengeSession"
      description:
        type: string
        description: "Description of the error"

  AttributeType:
    description: "Specifies the attribute type standard or custom."
    type: object
    properties:
      Name:
        description: "The name of the attribute."
        type: string
      Value:
        description: "value of the attribute"
        type: string

  MFAOptionType:
    description: "SMS MFA configuration type"
    type: object
    properties:
      AttributeName:
        description: "The attribute name of the MFA option type. The only valid value is phone_number."
        type: string
      DeliveryMedium:
        description: "Parameter for SMS delivery medium value."
        type: string