swagger: "2.0"
info:
  title: dp-identity-api
  description: "An API used to manage the authorisation of users accessing data publishing services."
  version: 1.0.0
  license:
    name: "Open Government Licence v3.0"
    url: "http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"
basePath: "/v1"
schemes:
  - http
paths:
  /tokens:
    post:
      tags:
        - Tokens
      summary: "Creates tokens for authorisation, ID and refresh for authenticated users"
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: "The email and password for a user"
          schema:
            type: object
            required:
              - user
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: "Created"
          headers:
            Authorization:
              type: string
              description: "Auth token"
            ID:
              type: string
              description: "ID token"
            Refresh:
              type: string
              description: "Refresh token"
          schema:
            $ref: '#/definitions/SignInExpirationTime'
        400:
          description: "Invalid request. Empty or invalid email or empty password."
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: "Email or password are not authenticated"
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: "Forbidden. Too many login attempts"
          schema:
            $ref: '#/definitions/ErrorResponse'

        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tokens
      summary: "Enables functionality to logout all active users"
      consumes:
        - application/json
      responses:
        202:
          description: "Request Accepted"
        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /tokens/self:
    put:
      tags:
        - Tokens
      summary: "Refreshs a users access token using the refresh and ID tokens"
      consumes:
        - application/json
      parameters:
        - in: header
          type: string
          name: ID
          description: "The users ID token"
        - in: header
          type: string
          name: Refresh
          description: "The users refresh token"
      responses:
        201:
          description: "Created"
          headers:
            Authorization:
              type: string
              description: "Auth token"
            ID:
              type: string
              description: "ID token"
            Refresh:
              type: string
              description: "Refresh token"
          schema:
            $ref: '#/definitions/ExpirationTime'
        400:
          description: "Invalid request. Missing or malformed ID token or missing Refresh token provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: "Forbidden. Expired or invalid refresh token"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tokens
      summary: "Signs out a user, invalidating their access tokens"
      consumes:
        - application/json
      parameters:
        - in: header
          type: string
          name: Authorization
          description: "The users access token as bearer token"
      responses:
        204:
          description: "No Content - Successful sign out"
        400:
          description: "Invalid request. Missing, malformed or invalid access token provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users:
    get:
      parameters:
        - in: query
          name: active
          type: boolean
          description: filter on user active state.
      tags:
        - Users
      summary: "List users"
      description: "List all the user in the user pool"
      produces:
        - "application/json"
      responses:
        200:
          description: "The list of users"
          schema:
            $ref: '#/definitions/UserList'
        400:
          description: "the query filter was not of expected format"
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Users
      summary: "Creates a new user"
      description: "Creates a new user in cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: user
          description: "The forename, surname and email for a user."
          schema:
            required: ["forename","lastname","email"]
            type: object
            properties:
              forename:
                type: string
                example: "bob"
              lastname:
                type: string
                example: "bobbings"
              email:
                type: string
                example: "email@ons.gov.uk"
      responses:
        201:
          description: "The user is created"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "Unable to validate the forename, username or email in the request"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users/{id}:
    get:
      tags:
        - Users
      summary: "Get a user"
      description: "Gets the details of a user from the user pool"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the users id
      produces:
        - "application/json"
      responses:
        200:
          description: "The users details"
          schema:
            $ref: '#/definitions/User'
        404:
          description: "User not found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users/{id}/groups/:
    get:
      tags:
        - Users
      summary: "Get groups for a user"
      description: "Gets the details of groups that a given user is a member"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the users id
      produces:
        - "application/json"
      responses:
        200:
          description: "The user groups details"
          schema:
            $ref: '#/definitions/UserGroups'
        404:
          description: "User not found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      tags:
        - Users
      summary: "Update a user"
      description: "Updates the details of a user in the user pool"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the users id
        - in: body
          name: user
          description: "The forename, surname, active status and status notes for a user."
          schema:
            required: ["forename","lastname", "active"]
            type: object
            properties:
              forename:
                type: string
                example: "bob"
              lastname:
                type: string
                example: "bobbings"
              active:
                type: boolean
              status_notes:
                type: string
                example: "User has been suspended"
      responses:
        200:
          description: "The users details"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "User not found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: "User not found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users/self/password:
    put:
      tags:
        - Users
      summary: "Changes the users password"
      description: "Changes the users password in Cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Change password params"
          description: "The type of change request, email address, new password and session.
                        for type ForgottenPassword email address, new password and verification token"
          schema:
            required: ["type","email","password"]
            type: object
            properties:
              type:
                type: string
                example: "NewPasswordRequired"
              email:
                type: string
                example: "email@ons.gov.uk"
              password:
                type: string
              session:
                type: string
              verification_token:
                type: string
      responses:
        202:
          description: "Password changed"
          headers:
            Authorization:
              type: string
              description: "Auth token"
            ID:
              type: string
              description: "ID token"
            Refresh:
              type: string
              description: "Refresh token"
          schema:
            $ref: '#/definitions/PasswordResetExpirationTime'
        400:
          description: "Unable to validate the type, email, passowrd or session in the request"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
        501:
          description: "Requested unimplemented password change type"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /password-reset:
    post:
      tags:
        - Users
      summary: "Sends the user a password reset email"
      description: "Trigger a password reset email from Cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Password reset params"
          description: "The email address for the user resetting their password"
          schema:
            required: ["email"]
            type: object
            properties:
              email:
                type: string
                example: "email@ons.gov.uk"
      responses:
        202:
          description: "Request accepted"
        400:
          description: "Email was not in a valid format"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /groups:
    get:
      tags:
        - Groups
      summary: "List groups"
      description: "List all the groups in the user pool"
      produces:
        - "application/json"
      responses:
        200:
          description: "The list of groups"
          schema:
            $ref: '#/definitions/GroupsList'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Groups
      summary: "Create a new group"
      description: "Creates a new group in Cognito user pool"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Group"
          description: "The details of the group being created"
          schema:
            required: ["name", "precedence"]
            type: object
            properties:
              name:
                type: string
                example: "Th&is is a $£test group!~"
              precedence:
                type: integer
                example: 33
      responses:
        201:
          description: "The group has been successfully created"
          schema:
            $ref: '#/definitions/NewGroup'
        400:
          description: "Invalid group name or group precedence provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /groups/{id}:
    get:
      tags:
        - Groups
      summary: "Returns given group details "
      description: "Returns given group details"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
      responses:
        200:
          description: "The list group details"
          schema:
            $ref: '#/definitions/GroupsList'
        400:
          description: "Invalid group name provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Groups
      summary: "Update an existing group"
      description: "Update an existing group in Cognito user pool"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
        - in: body
          name: "Group"
          description: "The updated details for the group"
          schema:
            required: ["name", "precedence"]
            type: object
            properties:
              id:
                type: string
                example: "123-abc-456-def-789-ghi-0"
              name:
                type: string
                example: "Th&is is a $£test group!~"
              precedence:
                type: integer
                example: 33
      responses:
        200:
          description: "The group has been successfully updated"
          schema:
            $ref: '#/definitions/NewGroup'
        400:
          description: "Invalid group name or group precedence provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: "Group resource to be updated cannot be found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Groups
      summary: "Deletes given group"
      description: "Deletes given group"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
      responses:
        204:
          description: "Deleted group "
        404:
          description: "Invalid group ID provided"
        500:
          description: "Internal error occurred"
  /groups/{id}/members:
    post:
      tags:
        - Groups
      summary: "Add user to group"
      description: "Adds a user to an existing group in Cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
        - in: body
          name: "User id"
          description: "The id of the user being added to the group"
          schema:
            required: ["user_id"]
            type: object
            properties:
              user_id:
                type: string
      responses:
        200:
          description: "User added to group"
          schema:
            $ref: '#/definitions/Group'
        400:
          description: "Invalid group ID or user ID provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
    get:
      tags:
        - Groups
      summary: "Returns a list of users in a given group"
      description: "Returns a list of users in a given group in Cognito"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
      responses:
        200:
          description: "List of users in the group"
          schema:
            $ref: '#/definitions/Group'
        404:
          description: "Invalid group ID provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /groups/{id}/members/{user_id}:
    delete:
      tags:
        - Groups
      summary: "Remove user from group"
      description: "Removes a user from an existing group in Cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
        - in: path
          name: user_id
          type: string
          required: true
          description: the id of the user being removed from the group
      responses:
        200:
          description: "User removed from group"
          schema:
            $ref: '#/definitions/Group'
        400:
          description: "Invalid group ID or user ID provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'


responses:
  InternalError:
    description: "Failed to process the request due to an internal error"

definitions:
  ExpirationTime:
    type: object
    properties:
      message:
        type: string
        description: "Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
  SignInExpirationTime:
    type: object
    properties:
      expirationTime:
        type: string
        description: "Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
      refreshTokenExpirationTime:
        type: string
        description: "Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
  PasswordResetExpirationTime:
    type: object
    properties:
      expirationTime:
        type: string
        description: "Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
      refreshTokenExpirationTime:
        type: string
        description: "Refresh Token Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
  NewGroup:
    description: "The new group details for the response body"
    type: object
    properties:
      id:
        description: "The unique ID of the group"
        type: string
        example: "123-abc-456-def-789-ghi-0"
      name:
        description: "The human readable name of the group"
        type: string
        example: "thisisatestgroup"
      precedence:
        description: "The precedence of the group"
        type: integer
        example: 33
  Group:
    description: "The group model for the response body"
    type: object
    properties:
      id:
        description: "The group id"
        type: string
      name:
        description: "The group name"
        type: string
      precedence:
        description: "The priority of the group"
        type: integer
      created:
        description: "The date the group was created"
        type: string
      members:
        description: "A list of members of a group for the response body"
        type: array
        items:
          $ref: '#/definitions/User'
  GroupsList:
    description: "A list of groups for the response body"
    type: object
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/Group'
      count:
        type: integer
  UserList:
    description: "A list of users for the response body"
    type: object
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/User'
      count:
        type: integer
  UserGroup:
    description: "Model representing the details of a group that a user belongs too."
    type: object
    properties:
      creation_date:
        type: string
      description:
        type: string
      group_name:
        type: string
      last_modified_date:
        type: string
      precedence:
        type: integer
      role_arn:
        type: string
      user_pool_id:
        type: string
  UserGroups:
    description: "A list of groups that the user is a member for the response body"
    type: object
    properties:
      groups:
        type: array
        items:
          $ref: '#/definitions/UserGroup'
      next_token:
        type: string
      count:
        type: integer


  User:
    description: "The user model for the response body"
    type: object
    properties:
      id:
        description: "The users id"
        type: string
      forename:
        description: "The users forename"
        type: string
      surname:
        description: "The users surname"
        type: string
      email:
        description: "The users email address"
        type: string
      groups:
        description: "The groups the user belongs to"
        type: array
        items:
          description: "The groups name"
          type: string
      active:
        description: "Whether or not the user is active"
        type: boolean
      status_notes:
        description: "Notes about the updates made to the user"
        type: string
        example: "User has been suspended"
      status:
        description: "The current status of the user"
        type: string
        enum: [UNCONFIRMED, CONFIRMED, ARCHIVED, COMPROMISED, UNKNOWN, RESET_REQUIRED, FORCE_CHANGE_PASSWORD]
        example: "CONFIRMED"

  ErrorResponse:
    description: "A list of any errors"
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/ErrorObject'

  ErrorObject:
    description: "An individual error details"
    type: object
    properties:
      code:
        type: string
        description: "Code representing the type of error that occurred"
swagger: "2.0"
info:
  title: dp-identity-api
  description: "An API used to manage the authorisation of users accessing data publishing services."
  version: 1.0.0
  license:
    name: "Open Government Licence v3.0"
    url: "http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"
basePath: "/v1"
schemes:
  - http
paths:
  /tokens:
    post:
      tags:
        - Tokens
      summary: "Creates tokens for authorisation, ID and refresh for authenticated users"
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: "The email and password for a user"
          schema:
            type: object
            required:
              - user
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: "Created"
          headers:
            Authorization:
              type: string
              description: "Auth token"
            ID:
              type: string
              description: "ID token"
            Refresh:
              type: string
              description: "Refresh token"
          schema:
            $ref: '#/definitions/SignInExpirationTime'
        400:
          description: "Invalid request. Empty or invalid email or empty password."
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: "Email or password are not authenticated"
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: "Forbidden. Too many login attempts"
          schema:
            $ref: '#/definitions/ErrorResponse'

        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tokens
      summary: "Enables functionality to logout all active users"
      consumes:
        - application/json
      responses:
        202:
          description: "Request Accepted"
        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /tokens/self:
    put:
      tags:
        - Tokens
      summary: "Refreshs a users access token using the refresh and ID tokens"
      consumes:
        - application/json
      parameters:
        - in: header
          type: string
          name: ID
          description: "The users ID token"
        - in: header
          type: string
          name: Refresh
          description: "The users refresh token"
      responses:
        201:
          description: "Created"
          headers:
            Authorization:
              type: string
              description: "Auth token"
            ID:
              type: string
              description: "ID token"
            Refresh:
              type: string
              description: "Refresh token"
          schema:
            $ref: '#/definitions/ExpirationTime'
        400:
          description: "Invalid request. Missing or malformed ID token or missing Refresh token provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: "Forbidden. Expired or invalid refresh token"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tokens
      summary: "Signs out a user, invalidating their access tokens"
      consumes:
        - application/json
      parameters:
        - in: header
          type: string
          name: Authorization
          description: "The users access token as bearer token"
      responses:
        204:
          description: "No Content - Successful sign out"
        400:
          description: "Invalid request. Missing, malformed or invalid access token provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Unexpected internal error"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users:
    get:
      parameters:
        - in: query
          name: active
          type: boolean
          description: filter on user active state.
      tags:
        - Users
      summary: "List users"
      description: "List all the user in the user pool"
      produces:
        - "application/json"
      responses:
        200:
          description: "The list of users"
          schema:
            $ref: '#/definitions/UserList'
        400:
          description: "the query filter was not of expected format"
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Users
      summary: "Creates a new user"
      description: "Creates a new user in cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: user
          description: "The forename, surname and email for a user."
          schema:
            required: ["forename","lastname","email"]
            type: object
            properties:
              forename:
                type: string
                example: "bob"
              lastname:
                type: string
                example: "bobbings"
              email:
                type: string
                example: "email@ons.gov.uk"
      responses:
        201:
          description: "The user is created"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "Unable to validate the forename, username or email in the request"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users/{id}:
    get:
      tags:
        - Users
      summary: "Get a user"
      description: "Gets the details of a user from the user pool"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the users id
      produces:
        - "application/json"
      responses:
        200:
          description: "The users details"
          schema:
            $ref: '#/definitions/User'
        404:
          description: "User not found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users/{id}/groups/:
    get:
      tags:
        - Users
      summary: "Get groups for a user"
      description: "Gets the details of groups that a given user is a member"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the users id
      produces:
        - "application/json"
      responses:
        200:
          description: "The user groups details"
          schema:
            $ref: '#/definitions/UserGroups'
        404:
          description: "User not found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      tags:
        - Users
      summary: "Update a user"
      description: "Updates the details of a user in the user pool"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the users id
        - in: body
          name: user
          description: "The forename, surname, active status and status notes for a user."
          schema:
            required: ["forename","lastname", "active"]
            type: object
            properties:
              forename:
                type: string
                example: "bob"
              lastname:
                type: string
                example: "bobbings"
              active:
                type: boolean
              status_notes:
                type: string
                example: "User has been suspended"
      responses:
        200:
          description: "The users details"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "User not found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: "User not found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /users/self/password:
    put:
      tags:
        - Users
      summary: "Changes the users password"
      description: "Changes the users password in Cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Change password params"
          description: "The type of change request, email address, new password and session.
                        for type ForgottenPassword email address, new password and verification token"
          schema:
            required: ["type","email","password"]
            type: object
            properties:
              type:
                type: string
                example: "NewPasswordRequired"
              email:
                type: string
                example: "email@ons.gov.uk"
              password:
                type: string
              session:
                type: string
              verification_token:
                type: string
      responses:
        202:
          description: "Password changed"
          headers:
            Authorization:
              type: string
              description: "Auth token"
            ID:
              type: string
              description: "ID token"
            Refresh:
              type: string
              description: "Refresh token"
          schema:
            $ref: '#/definitions/PasswordResetExpirationTime'
        400:
          description: "Unable to validate the type, email, passowrd or session in the request"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
        501:
          description: "Requested unimplemented password change type"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /password-reset:
    post:
      tags:
        - Users
      summary: "Sends the user a password reset email"
      description: "Trigger a password reset email from Cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Password reset params"
          description: "The email address for the user resetting their password"
          schema:
            required: ["email"]
            type: object
            properties:
              email:
                type: string
                example: "email@ons.gov.uk"
      responses:
        202:
          description: "Request accepted"
        400:
          description: "Email was not in a valid format"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /groups:
    get:
      tags:
        - Groups
      summary: "List groups"
      description: "List all the groups in the user pool"
      produces:
        - "application/json"
      responses:
        200:
          description: "The list of groups"
          schema:
            $ref: '#/definitions/GroupsList'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Groups
      summary: "Create a new group"
      description: "Creates a new group in Cognito user pool"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Group"
          description: "The details of the group being created"
          schema:
            required: ["name", "precedence"]
            type: object
            properties:
              name:
                type: string
                example: "Th&is is a $£test group!~"
              precedence:
                type: integer
                example: 33
      responses:
        201:
          description: "The group has been successfully created"
          schema:
            $ref: '#/definitions/NewGroup'
        400:
          description: "Invalid group name or group precedence provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /groups/{id}:
    get:
      tags:
        - Groups
      summary: "Returns given group details "
      description: "Returns given group details"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
      responses:
        200:
          description: "The list group details"
          schema:
            $ref: '#/definitions/GroupsList'
        400:
          description: "Invalid group name provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Internal error occurred"
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Groups
      summary: "Update an existing group"
      description: "Update an existing group in Cognito user pool"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
        - in: body
          name: "Group"
          description: "The updated details for the group"
          schema:
            required: ["name", "precedence"]
            type: object
            properties:
              id:
                type: string
                example: "123-abc-456-def-789-ghi-0"
              name:
                type: string
                example: "Th&is is a $£test group!~"
              precedence:
                type: integer
                example: 33
      responses:
        200:
          description: "The group has been successfully updated"
          schema:
            $ref: '#/definitions/NewGroup'
        400:
          description: "Invalid group name or group precedence provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: "Group resource to be updated cannot be found"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Groups
      summary: "Deletes given group"
      description: "Deletes given group"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
      responses:
        204:
          description: "Deleted group "
        404:
          description: "Invalid group ID provided"
        500:
          description: "Internal error occurred"
  /groups/{id}/members:
    post:
      tags:
        - Groups
      summary: "Add user to group"
      description: "Adds a user to an existing group in Cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
        - in: body
          name: "User id"
          description: "The id of the user being added to the group"
          schema:
            required: ["user_id"]
            type: object
            properties:
              user_id:
                type: string
      responses:
        200:
          description: "User added to group"
          schema:
            $ref: '#/definitions/Group'
        400:
          description: "Invalid group ID or user ID provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
    get:
      tags:
        - Groups
      summary: "Returns a list of users in a given group"
      description: "Returns a list of users in a given group in Cognito"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
      responses:
        200:
          description: "List of users in the group"
          schema:
            $ref: '#/definitions/Group'
        404:
          description: "Invalid group ID provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'
  /groups/{id}/members/{user_id}:
    delete:
      tags:
        - Groups
      summary: "Remove user from group"
      description: "Removes a user from an existing group in Cognito"
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: the group's ID
        - in: path
          name: user_id
          type: string
          required: true
          description: the id of the user being removed from the group
      responses:
        200:
          description: "User removed from group"
          schema:
            $ref: '#/definitions/Group'
        400:
          description: "Invalid group ID or user ID provided"
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: "Invalid request body or unexpected Cognito response"
          schema:
            $ref: '#/definitions/ErrorResponse'


responses:
  InternalError:
    description: "Failed to process the request due to an internal error"

definitions:
  ExpirationTime:
    type: object
    properties:
      message:
        type: string
        description: "Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
  SignInExpirationTime:
    type: object
    properties:
      expirationTime:
        type: string
        description: "Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
      refreshTokenExpirationTime:
        type: string
        description: "Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
  PasswordResetExpirationTime:
    type: object
    properties:
      expirationTime:
        type: string
        description: "Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
      refreshTokenExpirationTime:
        type: string
        description: "Refresh Token Expiration Time, UTC ISO 8601"
        example: "YYYY-MM-DD hh-mm-ssZ"
  NewGroup:
    description: "The new group details for the response body"
    type: object
    properties:
      id:
        description: "The unique ID of the group"
        type: string
        example: "123-abc-456-def-789-ghi-0"
      name:
        description: "The human readable name of the group"
        type: string
        example: "thisisatestgroup"
      precedence:
        description: "The precedence of the group"
        type: integer
        example: 33
  Group:
    description: "The group model for the response body"
    type: object
    properties:
      id:
        description: "The group id"
        type: string
      name:
        description: "The group name"
        type: string
      precedence:
        description: "The priority of the group"
        type: integer
      created:
        description: "The date the group was created"
        type: string
      members:
        description: "A list of members of a group for the response body"
        type: array
        items:
          $ref: '#/definitions/User'
  GroupsList:
    description: "A list of groups for the response body"
    type: object
    properties:
      groups:
        type: array
        items:
          $ref: '#/definitions/Group'
      count:
        type: integer
  UserList:
    description: "A list of users for the response body"
    type: object
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/User'
      count:
        type: integer
  UserGroup:
    description: "Model representing the details of a group that a user belongs too."
    type: object
    properties:
      creation_date:
        type: string
      description:
        type: string
      group_name:
        type: string
      last_modified_date:
        type: string
      precedence:
        type: integer
      role_arn:
        type: string
      user_pool_id:
        type: string
  UserGroups:
    description: "A list of groups that the user is a member for the response body"
    type: object
    properties:
      groups:
        type: array
        items:
          $ref: '#/definitions/UserGroup'
      next_token:
        type: string
      count:
        type: integer


  User:
    description: "The user model for the response body"
    type: object
    properties:
      id:
        description: "The users id"
        type: string
      forename:
        description: "The users forename"
        type: string
      surname:
        description: "The users surname"
        type: string
      email:
        description: "The users email address"
        type: string
      groups:
        description: "The groups the user belongs to"
        type: array
        items:
          description: "The groups name"
          type: string
      active:
        description: "Whether or not the user is active"
        type: boolean
      status_notes:
        description: "Notes about the updates made to the user"
        type: string
        example: "User has been suspended"
      status:
        description: "The current status of the user"
        type: string
        enum: [UNCONFIRMED, CONFIRMED, ARCHIVED, COMPROMISED, UNKNOWN, RESET_REQUIRED, FORCE_CHANGE_PASSWORD]
        example: "CONFIRMED"

  ErrorResponse:
    description: "A list of any errors"
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/ErrorObject'

  ErrorObject:
    description: "An individual error details"
    type: object
    properties:
      code:
        type: string
        description: "Code representing the type of error that occurred"
        enum:
          - "InvalidUserId"
          - "InvalidGroupID"
          - "InvalidForename"
          - "InvalidSurname"
          - "InvalidStatusNotes"
          - "InvalidEmail"
          - "InvalidToken"
          - "InternalServerError"
          - "NotFound"
          - "UserNotFound"
          - "GroupExists"
          - "GroupNotFound"
          - "DeliveryFailure"
          - "InvalidCode"
          - "ExpiredCode"
          - "InvalidField"
          - "InvalidPassword"
          - "LimitExceeded"
          - "NotAuthorised"
          - "PasswordResetRequired"
          - "TooManyFailedAttempts"
          - "TooManyRequests"
          - "UserNotConfirmed"
          - "UsernameExists"
          - "MissingConfig"
          - "UnknownRequestType"
          - "BodyCloseError"
          - "InvalidGroupName"
          - "InvalidGroupPrecedence"
          - "InvalidFilterQuery"
      description:
        type: string
        description: "Description of the error"
